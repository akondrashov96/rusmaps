labs(x=expression("coef"*diet[index]))+
labs(y="Time")+
labs(title="Chicks")
source('~/Documents/R/Coursepaper/Workings/ggplot3.R')
source('~/Documents/R/Coursepaper/Workings/H_Clustering.R')
rep(1)
rep(12)
rep(1:3)
rep(1:3, each=4)
source('~/Documents/R/Coursepaper/Workings/H_Clustering.R')
set.seed(1234)
par(mar=c(0,0,0,0))
x<-rnorm(12,mean=rep(1:3, each=4), sd=0.2)
y<-rnorm(12,mean=rep(c(1,2,1), each=4), sd=0.2)
plot(x,y, col="blue", pch=19, cex=2)
text(x+0.05, y+0.05, labels=as.character(1:12))
set.seed(1234)
par(mar=c(0,0,0,0))
x<-rnorm(12,mean=rep(1:3, each=4), sd=0.2)
y<-rnorm(12,mean=rep(c(1,2,1), each=4), sd=0.2)
plot(x,y, col="blue", pch=19, cex=2)
text(x+0.05, y+0.05, labels=as.character(1:12))
set.seed(32)
par(mar=c(0,0,0,0))
x<-rnorm(12,mean=rep(1:3, each=4), sd=0.2)
y<-rnorm(12,mean=rep(c(1,2,1), each=4), sd=0.2)
plot(x,y, col="blue", pch=19, cex=2)
text(x+0.05, y+0.05, labels=as.character(1:12))
set.seed(2323)
par(mar=c(0,0,0,0))
x<-rnorm(12,mean=rep(1:3, each=4), sd=0.2)
y<-rnorm(12,mean=rep(c(1,2,1), each=4), sd=0.2)
plot(x,y, col="blue", pch=19, cex=2)
text(x+0.05, y+0.05, labels=as.character(1:12))
set.seed(22233)
par(mar=c(0,0,0,0))
x<-rnorm(12,mean=rep(1:3, each=4), sd=0.2)
y<-rnorm(12,mean=rep(c(1,2,1), each=4), sd=0.2)
plot(x,y, col="blue", pch=19, cex=2)
text(x+0.05, y+0.05, labels=as.character(1:12))
set.seed(1234)
par(mar=c(0,0,0,0))
x<-rnorm(12,mean=rep(1:3, each=4), sd=0.2)
y<-rnorm(12,mean=rep(c(1,2,1), each=4), sd=0.2)
plot(x,y, col="blue", pch=19, cex=2)
text(x+0.05, y+0.05, labels=as.character(1:12))
dataFrame<-data.frame(x=x,y=y)
dist(dataFrame)
dataFrame <- data.frame(x=x,y=y)
distxy <- dist(dataFrame)
hClustering <- hclust(distxy)
plot(hClustering)
source('~/Documents/R/Coursepaper/Workings/H_Clustering.R')
source('~/Documents/R/Coursepaper/Workings/H_Clustering.R')
source('~/Documents/R/Coursepaper/Workings/H_Clustering.R')
source('~/Documents/R/Coursepaper/Workings/H_Clustering.R')
source('~/Documents/R/Coursepaper/Workings/H_Clustering.R')
dataFrame <- data.frame(x=x,y=y)
distxy <- dist(dataFrame)
hClustering <- hclust(distxy)
myplclust(hClustering, lab=rep(1:3, each = 4), lab.col=rep(1:3, each = 4))
source('~/Documents/R/Coursepaper/Workings/H_Clustering.R')
dataFrame <- data.frame(x = x, y = y)
set.seed(143)
dataMatrix <- as.matrix(dataFrame)[sample(1:12), ]
heatmap(dataMatrix)
source('~/Documents/R/Coursepaper/Workings/H_Clustering.R')
dataMatrix
plot(x,y, data=dataMatrix)
plot(dataMatrix)
dataFrame
source('~/Documents/R/Coursepaper/Workings/H_Clustering.R')
source('~/Documents/R/Coursepaper/Workings/K-means_Clustering.R')
dataFrame <- data.frame(x,y)
kmeansObj <- kmeans(dataFrame, centers = 3)
names(kmeansObj)
kmeansObj$cluster
plot(kmeansObj)
source('~/Documents/R/Coursepaper/Workings/K-means_Clustering.R')
source('~/Documents/R/Coursepaper/Workings/K-means_Clustering.R')
par(mar = rep(0.2, 4))
plot(x, y, col = kmeansObj$cluster, pch = 19, cex = 2)
points(kmeansObj$centers, col = 1:3, pch = 3, cex = 3, lwd = 3)
set.seed(1234)
dataMatrix <- as.matrix(dataFrame)[sample(1:12), ]
kmeansObj2 <- kmeans(dataMatrix, centers = 3)
par(mfrow = c(1, 2), mar = c(2, 4, 0.1, 0.1))
image(t(dataMatrix)[, nrow(dataMatrix):1], yaxt = "n")
image(t(dataMatrix)[, order(kmeansObj$cluster)], yaxt = "n" )
set.seed(1234)
dataMatrix <- as.matrix(dataFrame)[sample(1:12), ]
kmeansObj2 <- kmeans(dataMatrix, centers = 3)
par(mfrow = c(1, 2), mar = c(2, 4, 0.1, 0.1))
image(t(dataMatrix)[, nrow(dataMatrix):1], yaxt = "n")
image(t(dataMatrix)[, order(kmeansObj2$cluster)], yaxt = "n" )
##Heatmap
set.seed(1234)
dataMatrix <- as.matrix(dataFrame)[sample(1:12), ]
kmeansObj2 <- kmeans(dataMatrix, centers = 3)
par(mfrow = c(1, 2), mar = c(2, 4, 0.1, 0.1))
image(t(dataMatrix)[, nrow(dataMatrix):1], yaxt = "n")
image(t(dataMatrix)[, order(kmeansObj$cluster)], yaxt = "n" )
set.seed(1234)
dataMatrix <- as.matrix(dataFrame)[sample(1:12), ]
kmeansObj2 <- kmeans(dataMatrix, centers = 3)
par(mfrow = c(1, 2), mar = c(2, 4, 0.1, 0.1))
image(t(dataMatrix)[, nrow(dataMatrix):1], yaxt = "n")
image(t(dataMatrix)[, order(kmeansObj2$cluster)], yaxt = "n" )
source('~/Documents/R/Coursepaper/Workings/K-means_Clustering.R')
source('~/Documents/R/Coursepaper/Workings/K-means_Clustering.R')
install.packages("swirl")
install_from_swirl("Exploratory Data Analysis")
library(swirl)
install_from_swirl("Exploratory Data Analysis")
source('~/Documents/R/Coursepaper/Workings/K-means_Clustering.R')
source('~/Documents/R/Coursepaper/Workings/Dimensio reduction.R')
par(mar = rep(1, 4))
dataMatrix <- matrix(rnorm(400), nrow = 40)
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
par(mar = rep(5, 5))
dataMatrix <- matrix(rnorm(400), nrow = 40)
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
par(mar = rep(10, 10))
dataMatrix <- matrix(rnorm(400), nrow = 40)
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
par(mar = rep(0.2, 4))
dataMatrix <- matrix(rnorm(400), nrow = 40)
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
source('~/Documents/R/Coursepaper/Workings/Dimensio reduction.R')
heatmap(dataMatrix)
par(mar = rep(0.2, 4))
heatmap(dataMatrix)
source('~/Documents/R/Coursepaper/Workings/Dimensio reduction.R')
dataMatrix <- matrix(rnorm(400), nrow = 40)
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
set.seed(678910)
for (i in 1:40)
{
#flip a coin
coinFlip <- rbinom(1, size = 1, prob = 0.5)
#if coin is heads up add a common pattern to that row
if (coinFlip)
{
dataMatrix[i, ] <- dataMatrix[i, ] + rep(c(0, 3), each = 5)
}
}
##Check
dataMatrix <- matrix(rnorm(400), nrow = 40)
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
set.seed(678910)
for (i in 1:40)
{
#flip a coin
coinFlip <- rbinom(1, size = 1, prob = 0.5)
#if coin is heads up add a common pattern to that row
if (coinFlip)
{
dataMatrix[i, ] <- dataMatrix[i, ] + rep(c(0, 3), each = 5)
}
}
par(mar = rep(0.2, 4))
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
source('~/Documents/R/Coursepaper/Workings/Dimensio reduction.R')
heatmap(dataMatrix)
hh <- hclust(dist(dataMatrix))
dataMatrixOrdered <- dataMatrix[hh$order, ]
par(mfrow = c(1, 3))
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
plot(rowMeans(dataMatrixOrdered), 40:1, xlab = "Row mean", ylab = "Row", pch = 19)
plot(colMeans(dataMatrixOrdered), xlab = "Column", ylab = "Column Mean", pch = 19)
source('~/Documents/R/Coursepaper/Workings/Dimensio reduction.R')
library(grDevices)
pal <- colorRamp(c("red", "blue"))
pal(0)
pal(1)
pal(0.5)
pal(seq(0, 1, len = 10))
##colorRampPalette
pal <- colorRampPalette(c("red", "yellow"))
pal(2)
pal(10)
library(RColorBrewer)
cols <- brewer.pal(3, "BuGn")
cols
pal <- colorRampPalette(cols)
image(volcano, col = pal(20))
x <- rnorm(10000)
y <- rnorm(10000)
smoothScatter(x, y)
plot(x, y, col = rgb(0,0,0,0.2), pch = 19)
x <- rnorm(1000)
y <- rnorm(1000)
plot(x, y, col = rgb(0,0,0,0.2), pch = 19)
x <- 1:400
y <- sin(x / 10) * exp(x * -0.01)
plot(x, y)
??regression
?regression
??plot
?plot
??plot
library("ggmap", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
detach("package:ggplot2", unload=TRUE)
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("rgdal", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("rgeos", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("maptools", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("tidyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
install.packages("tmap")
library("quantmod")
install.packages("quantmod")
library("dplyr") #manipulating data frames
library("xts") #working with time series
library("lpSolve") #solving linear programming
getSymbols(Symbols = c("AAPL", "MSFT", "GOOG"),
from = "2015-01-01", to = "2016-01-01")
library("quantmod") #Load data from Yahoo/google finance
library("dplyr") #manipulating data frames
library("xts") #working with time series
library("lpSolve") #solving linear programming
getSymbols(Symbols = c("AAPL", "MSFT", "GOOG"),
from = "2015-01-01", to = "2016-01-01")
head(AAPL)
head(MSFT)
head(GOOG)
all <- merge.xts(AAPL, MSFT, GOOG)
colnames(all)
all2 <- as.data.frame(all)
all3 <- seect(all2, ends_with("Adjusted"))
glimpse(all3)
all3 <- select(all2, ends_with("Adjusted"))
glimpse(all3)
all4 <- na.omit(all3)
glimpse(all4)
all4 <- na.omit(all3)
glimpse(all4)
all5 <- mutate(all4,
r_a = diff(log(AAPL.Adjusted)))
all1 <- diff(log(all))
all1 <- diff(log(all))
all2 <- as.data.frame(all)
all3 <- select(all2, ends_with("Adjusted"))
glimpse(all3)
all4 <- na.omit(all3)
glimpse(all4)
all5 <- mutate(all4,
r_a = diff(log(AAPL.Adjusted)))
v <- c(5,6,7)
mean(v)
mu <- apply(all4, MARGIN = 1, mean)
mu
T<-nrow(R)
T
MU <- matrix(rep(mu, T), nrow = T)
head(MU)
MU <- matrix(rep(mu, T), nrow = Tm byrow = TRUE)
head(MU)
MU <- matrix(rep(mu, T), nrow = T, byrow = TRUE)
head(MU)
mu <- apply(all4, MARGIN = 2, mean)
R <- all4
T<-nrow(R)
T
MU <- matrix(rep(mu, T), nrow = T, byrow = TRUE)
head(MU)
D <- R-MU
I <- diag(T)
II <- rbind(I, -I)
OII <- rbind(rep(0,T), I, -I)
OII
OII
EDO <- rbind(rep(1, K), D, D)
A <- cbind(EDO, OII)
lambda <- 10
coefs <- c(lambda * mu, rep(-1/T, T))
dirs<- c("=", rep(">", T), rep("<", T))
result$objective
result <- lp(direction = "max",
const.mat = A,
const.dir = dirs,
const.rhs = b,
objective.in <- coefs)
afms <- c("times.afm", "timesbd.afm", "timesi.afm", "timesbi.afm")
RUS <- Type1Font("TimesNewRomanPSMT-Regular", afms, "KOI8-R")
pdfFonts("EDM" = RUS)
pdf("russian.pdf")
plot(1, 1, family = "EDM", main = "Название")
warnings()
library(grid)
grid.text("надпись", gp = gpar(fontfamily = "EDM"))
dev.off()
embedFonts("russian.pdf", fontpaths = "/Users/Artem/Библиотеки/Fonts")
pdf("russian.pdf")
plot(1, 1, family = "EDM", main = "Название")
library(grid)
grid.text("надпись", gp = gpar(fontfamily = "EDM"))
dev.off()
embedFonts("russian.pdf", fontpaths = "/Users/Artem/Библиотеки/Fonts")
library("ggmap")
library("rgdal")
library("rgeos")
library("maptools")
library("dplyr")
library("tidyr")
library("tmap")
afms <- c("times.afm.gz", "timesbd.afm.gz", "timesi.afm.gz", "timesbi.afm.gz")
RUS <- Type1Font("TimesNewRomanPSMT-Regular", afms, "KOI8-R")
pdfFonts("EDM" = RUS)
pdf("russian.pdf")
plot(1, 1, family = "EDM", main = "Название")
library(grid)
grid.text("надпись", gp = gpar(fontfamily = "EDM"))
dev.off()
plot(1, 1, family = "EDM", main = "Название")
library(grid)
grid.text("надпись", gp = gpar(fontfamily = "EDM"))
install.packages("tikzDevice")
?tikzDevice
library("tikzDevice", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
?tikzDevice
tikzUnicodeMetrixPackages = TRUE
tikzUnicodeMetrixPackages
library("extrafont")
font_import()
fonttable()
fonts()
pdf("sample.pdf",width = 6.6 ,height = 4.2,family= "URWHelvetica",  encoding="KOI8-R")
x<-c(1,2,3,4,5)
y<-c(2,3,4,5,6)
xlable<-c("ручка","книга","часы","ложка","смотреть")
plot(x,y,xlab=xlable)
dev.off()
pdf("sample.pdf",width = 6.6 ,height = 4.2,family= "URWHelvetica",  encoding="KOI8-R")
x<-c(1,2,3,4,5)
y<-c(2,3,4,5,6)
xlable<-c("ghkkk","книга","часы","ложка","смотреть")
plot(x,y,xlab=xlable)
dev.off()
x<-c(1,2,3,4,5)
y<-c(2,3,4,5,6)
xlable<-c("ghkkk","книга","часы","ложка","смотреть")
plot(x,y,xlab=xlable)
install.packages("Cairo")
library("cairo")
library("Cairo", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("Cairo")
cairo_pdf("sample.pdf",width = 6.6 ,height = 4.2,family= "URWHelvetica",  encoding="KOI8-R")
cairo_pdf("sample.pdf)
x<-c(1,2,3,4,5)
y<-c(2,3,4,5,6)
xlable<-c("ghkkk","книга","часы","ложка","смотреть")
plot(x,y,xlab=xlable)
library("Cairo")
cairo_pdf("sample.pdf")
x<-c(1,2,3,4,5)
y<-c(2,3,4,5,6)
xlable<-c("ghkkk", "книга")
plot(x,y,xlab=xlable)
dev.off()
library("ggplot2")
library("ggmap")
library("rgdal")
library("rgeos")
library("maptools")
library("dplyr")
library("tidyr")
library("tmap")
library("maps")
library("mapdata")
#Все необходимые пакеты для работы
library("ggplot2")
library("ggmap")
library("plotly")
library("rgdal")
library("rgeos")
library("maptools")
library("dplyr")
library("tidyr")
library("tmap")
library("leaflet")
library("htmlwidgets")
library("webshot")
library("maps")
library("mapdata")
#Хорошие карты RU-MOS, sib10 (для России), Moscow_region (таблица лучше оформлена)
#Данные настройки были использованы в курсовой
setwd("/Users/Artem/Documents/МИЭФ/курс 2/Курсовая/WORK")
test <- readOGR("Карты/Города_миллионники/", "Волгоград")
plot(test)
head(test@data)
test <- readOGR("Карты/Города_миллионники/", "Воронеж")
plot(test)
test <- readOGR("Карты/Города_миллионники/", "города миллионники")
plot(test)
test <- readOGR("Карты/Города_миллионники/", "Екатеринбург")
plot(test)
test <- readOGR("Карты/Города_миллионники/", "Казань")
plot(test)
test <- readOGR("Карты/Города_миллионники/", "Красноярск")
plot(test)
test <- readOGR("Карты/Города_миллионники/", "Москва")
plot(test)
test <- readOGR("Карты/Города_миллионники/", "Нижний Новгород")
test <- readOGR("Карты/Города_миллионники/", "Нижний  Новгород")
test <- readOGR("Карты/Города_миллионники/", "НижнийНовгород")
test <- readOGR("Карты/Города_миллионники/", "Нижний_Новгород")
test <- readOGR("Карты/Города_миллионники/", "Нижний_Новгород")
plot(test)
test <- readOGR("Карты/Города_миллионники/", "Н_Новгород")
plot(test)
test <- readOGR("Карты/Города_миллионники/", "Новосибирск")
plot(test)
test <- readOGR("Карты/Города_миллионники/", "Омск")
plot(test)
test <- readOGR("Карты/Города_миллионники/", "Пермь")
plot(test)
test <- readOGR("Карты/Города_миллионники/", "Ростов-на-Дону")
plot(test)
test <- readOGR("Карты/Города_миллионники/", "Самара")
plot(test)
test <- readOGR("Карты/Города_миллионники/", "Санкт-Петербург")
plot(test)
head(test@data)
test <- readOGR("Карты/Города_миллионники/", "Уфа")
plot(test)
test <- readOGR("Карты/Города_миллионники/", "Челябинск")
plot(test)
check()
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
check()
library("roxygen2", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
setwd(~/GitHub/rusmaps)
setwd("~/GitHub/rusmaps")
check()
library(rusmaps)
?longitude_correction
load("/Users/Artem/GitHub/rusmaps/data/cars.rda")
View(cars)
?cars
?data
getwd()
x <- readOGR("/Карты/Города_миллионники", "города миллионники")
x <- readOGR("Карты/Города_миллионники", "города миллионники")
test <- readOGR("Карты/Города_миллионники/", "города миллионники")
setwd("/Users/Artem/Documents/МИЭФ/курс 2/Курсовая/WORK")
data <- readOGR("Карты/Города_миллионники/", "города миллионники")
setwd("~/GitHub/rusmaps")
use_data(data, "rusmaps")
use_data(data, rusmaps)
use_data(data)
cities <- readOGR("Карты/Города_миллионники/", "города миллионники")
setwd("~/GitHub/rusmaps")
setwd("/Users/Artem/Documents/МИЭФ/курс 2/Курсовая/WORK")
cities <- readOGR("Карты/Города_миллионники/", "города миллионники")
setwd("~/GitHub/rusmaps")
use_data(cities)
summary(cities)
cities[,1] <- 1:length(cities$id)
for (i in 1:length(cities$id)){
cities[i, 1] <- i
}
cities@data
cities
setwd("/Users/Artem/Documents/МИЭФ/курс 2/Курсовая/WORK")
cities <- readOGR("Карты/Города_миллионники/", "города миллионники")
for (i in 1:length(cities@data$id)) {
cities@data[i, 1] <- i
}
cities@data
warnings()
setwd("/Users/Artem/Documents/МИЭФ/курс 2/Курсовая/WORK")
cities <- readOGR("Карты/Города_миллионники/", "города миллионники")
cities@data
summary(cities)
setwd("~/GitHub/rusmaps")
use_data(cities)
check()
check()
check()
check()
check()
check()
check()
check()
install_github("akondrashov96/rusmaps", ref="dev")
cities
?cities
cities@data
setwd("/Users/Artem/Documents/МИЭФ/курс 2/Курсовая/WORK")
cities <- readOGR("Карты/Города_миллионники/", "города миллионники")
cities@data
setwd("~/GitHub/rusmaps")
use_data(cities)
use_data(cities)
cities <- readOGR("Карты/Города_миллионники", "Воронеж")
Voronezh <- readOGR("Карты/Города_миллионники", "Воронеж")
setwd("/Users/Artem/Documents/МИЭФ/курс 2/Курсовая/WORK")
Voronezh <- readOGR("Карты/Города_миллионники", "Воронеж")
Voronezh@data
Voronezh@data[, 1] <- c(1:length(Voronezh@data$id))
Voronezh@data
setwd("~/GitHub/rusmaps")
use_data(Voronezh)
dev_mode()
check()
Voronezh@data
check()
install_github("akondrashov96/rusmaps", ref="dev")
library(rusmaps)
cities@data
plot(Voronezh)
